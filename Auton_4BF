/*
*/
package org.firstinspires.ftc.robotcontroller.external.samples;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcontroller.external.samples.ConceptVuforiaNavigation;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.VuMarkInstanceId;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;

/**
 * Created by Noah Trist
 */

@Autonomous(name = "Auton_4BF", group = "Concept")
//@Disabled
public class Auton_4BF extends LinearOpMode {

    public DcMotor LeftB = null;
    public DcMotor RightB = null;
    public DcMotor arm1=null;
    public DcMotor arm2=null;
    public DcMotor python=null;
    public Servo Lclamp1=null;
    public Servo Rclamp1=null;
    public Servo Lclamp2=null;
    public Servo Rclamp2=null;
    public Servo jewel1=null;
    public Servo jewel2=null;
    public Servo relicgrabber=null;
    public Servo reliclifter=null;






    static final double Lclampopen =1;
    static final double Rclampopen =0;
    static final double Lclampclosed =.4;
    static final double Rclampclosed =.6;
    static final double Lclamprelease =.63;
    static final double Rclamprelease =.37;
    static final double J1down=1;
    static final double J1up=0;
    static final double J2out=.45;
    static final double J2forward=1;
    static final double J2backward=0;
    static final double relicgrab=0;
    static final double relicrelease=1;
    static final double relicup=1;
    static final double relicdown=.25;




    boolean L;
    boolean R;
    boolean C;


    ColorSensor colorSensor;
    ColorSensor colorSenso2;


    HardwareMap hwMap = null;

    IdentifiyRelicVuMark vuMark = new IdentifiyRelicVuMark();

    private ElapsedTime runtime = new ElapsedTime();

    // static final double     COUNTS_PER_MOTOR_REV    = 1440 ;    // eg: TETRIX Motor Encoder
    static final double     COUNTS_PER_MOTOR_REV    = 30;
    static final double     DRIVE_GEAR_REDUCTION    = 40.0 ;     // This is < 1.0 if geared UP
    static final double     WHEEL_DIAMETER_INCHES   = 4.1 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double     DRIVE_SPEED             = 0.2;
    static final double     TURN_SPEED              = 0.2;
    static final double     ARM_SPEED               = 0.2;
    static final int        ARM_UP                  = -150;
    static final int        ARM_MORE_UP             = -750;
    static final int        ARM_LESS_UP             = 250;
    static final int        ARM_DOWN                = 500;





    @Override
    public void runOpMode() {



        vuMark.init(hardwareMap);

        telemetry.addData("Status", "Initialized");
        telemetry.update();
        hwMap = hardwareMap;

        LeftB = hwMap.dcMotor.get("LB");
        RightB = hwMap.dcMotor.get("RB");
        arm1 = hwMap.dcMotor.get("giraffe1");
        arm2 = hwMap.dcMotor.get("giraffe2");
        python = hwMap.dcMotor.get("python");
        Lclamp1 = hwMap.servo.get("Lclamp1");
        Rclamp1 = hwMap.servo.get("Rclamp1");
        Lclamp2 = hwMap.servo.get("Lclamp2");
        Rclamp2 = hwMap.servo.get("Rclamp2");
        jewel1 = hwMap.servo.get("J1");
        jewel2 = hwMap.servo.get("J2");
        relicgrabber = hwMap.servo.get("grab");
        reliclifter = hwMap.servo.get("lift");


        colorSenso2 = hardwareMap.colorSensor.get("color2");
        colorSensor = hardwareMap.colorSensor.get("color");

        LeftB.setDirection(DcMotor.Direction.FORWARD);
        RightB.setDirection(DcMotor.Direction.REVERSE);

        LeftB.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        RightB.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        arm1.setDirection(DcMotor.Direction.FORWARD);
        arm1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        arm2.setDirection(DcMotor.Direction.FORWARD);
        arm2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        // Send telemetry message to indicate successful Encoder reset
        telemetry.addData("Path0", "Starting at %7d :%7d",
                LeftB.getCurrentPosition(),
                RightB.getCurrentPosition());

        telemetry.update();

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        int looper = 5;
        while (vuMark.vuMarkFound() == RelicRecoveryVuMark.UNKNOWN && looper > 0) {
            looper--;
            sleep(1000);
        }


        if (vuMark.vuMarkFound() == RelicRecoveryVuMark.LEFT) {
            telemetry.addData("VuMark", "LEFT");
            L = true;
            R = false;
            C = false;

        } else if (vuMark.vuMarkFound() == RelicRecoveryVuMark.RIGHT) {
            telemetry.addData("VuMark", "RIGHT");
            L = false;
            R = true;
            C = false;


        } else if (vuMark.vuMarkFound() == RelicRecoveryVuMark.RIGHT) {
            telemetry.addData("VuMark", "CENTER");
            L = false;
            R = false;
            C = true;


        } else {
            telemetry.addData("VuMark", "Not Visible");

        }

        // Step through each leg of the path,
        // Note: Reverse movement is obtained by setting a negative distance (not speed)

        Lclamp1.setPosition(Lclampclosed);
        Rclamp1.setPosition(Rclampclosed);
        Rclamp2.setPosition(Rclampclosed);
        Lclamp2.setPosition(Lclampclosed);

        jewel2.setPosition(J2out);
        for (double x = 0; x <= 1; x = x +.04) {
            jewel1.setPosition(x);
            sleep(60);
        }
        jewel1.setPosition(J1down); // move the jewel arm down

        sleep (1000);

        if      (colorSensor.red() > colorSensor.blue()) jewel2.setPosition(J2forward);
        else if (colorSensor.red() < colorSensor.blue()) jewel2.setPosition(J2backward);
        else if (colorSenso2.red() > colorSenso2.blue()) jewel2.setPosition(J2backward);
        else if (colorSenso2.red() < colorSenso2.blue()) jewel2.setPosition(J2forward);



        jewel1.setPosition(J1up); // move the jewel arm back up
        sleep(250);
        jewel2.setPosition(J2out);
        sleep(1500);
        jewel2.setPosition(J2forward); // move the jewel hitter back out








        if (L) {

            arm1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm1.setTargetPosition(ARM_UP);
            arm2.setTargetPosition(ARM_UP);
            arm1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm1.setPower(ARM_SPEED);
            arm2.setPower(ARM_SPEED);

            encoderDrive(DRIVE_SPEED, -28.5, -28.5, 30);
            encoderDrive(TURN_SPEED, 5.25, -5.25, 30);
            encoderDrive(DRIVE_SPEED, 4, 4, 30);
            Lclamp1.setPosition(Lclampopen);
            Rclamp1.setPosition(Rclampopen);
            Lclamp2.setPosition(Lclampopen);
            Rclamp2.setPosition(Rclampopen);
            encoderDrive(DRIVE_SPEED, -4, -4, 30);
            

        } else if (R) {

            arm1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm1.setTargetPosition(ARM_MORE_UP);
            arm2.setTargetPosition(ARM_MORE_UP);
            arm1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm1.setPower(ARM_SPEED);
            arm2.setPower(ARM_SPEED);

            encoderDrive(DRIVE_SPEED, -44, -44, 30);
            encoderDrive(TURN_SPEED, 5.72, -5.72, 15);
            //  encoderDrive(DRIVE_SPEED, 4, 4, 15);

            arm1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm1.setTargetPosition(ARM_LESS_UP);
            arm2.setTargetPosition(ARM_LESS_UP);
            arm1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm1.setPower(ARM_SPEED);
            arm2.setPower(ARM_SPEED);

            sleep(500);

            encoderDrive(DRIVE_SPEED, 1.75, 1.75, 30);

            Lclamp1.setPosition(Lclampopen);
            Rclamp1.setPosition(Rclampopen);
            Lclamp2.setPosition(Lclampopen);
            Rclamp2.setPosition(Rclampopen);

            encoderDrive(DRIVE_SPEED, -6, -6, 15);

            arm1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm1.setTargetPosition(ARM_DOWN);
            arm2.setTargetPosition(ARM_DOWN);
            arm1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm1.setPower(ARM_SPEED);
            arm2.setPower(ARM_SPEED);


            encoderDrive(DRIVE_SPEED, 11, 11, 30);

            encoderDrive(DRIVE_SPEED, -4, -4, 30);


        } else {

            arm1.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            arm1.setTargetPosition(ARM_UP);
            arm2.setTargetPosition(ARM_UP);
            arm1.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            arm1.setPower(ARM_SPEED);
            arm2.setPower(ARM_SPEED);

            encoderDrive(DRIVE_SPEED, -36, -36 , 30);
            encoderDrive(TURN_SPEED, 5.4, -5.4, 30);
            encoderDrive(DRIVE_SPEED, 4, 4, 30);
            Lclamp1.setPosition(Lclampopen);
            Rclamp1.setPosition(Rclampopen);
            Lclamp2.setPosition(Lclampopen);
            Rclamp2.setPosition(Rclampopen);
            encoderDrive(DRIVE_SPEED, -4, -4, 30);



        }


        // encoderDrive(DRIVE_SPEED, -5, -5, 1.0);
        // encoderDrive(TURN_SPEED,   4, 24, 3.0);
        //encoderDrive(DRIVE_SPEED, -10, -10, 2.5);

        arm1.setPower(0);
        arm2.setPower(0);


        telemetry.update();


    }


    public void encoderDrive(double speed,
                             double leftInches, double rightInches,
                             double timeoutS) {
        int newLeftTarget;
        int newRightTarget;

        // Ensure that the opmode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller
            newLeftTarget = LeftB.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newRightTarget = RightB.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);

            LeftB.setTargetPosition(newLeftTarget);
            RightB.setTargetPosition(newRightTarget);

            // Turn On RUN_TO_POSITION
            LeftB.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            RightB.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            LeftB.setPower(Math.abs(speed));
            RightB.setPower(Math.abs(speed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test.
            while (opModeIsActive() &&
                    (runtime.seconds() < timeoutS) &&
                    (LeftB.isBusy() && RightB.isBusy())) {

                // Display it for the driver.
                telemetry.addData("Path1",  "Running to %7d :%7d", newLeftTarget,  newRightTarget);
                telemetry.addData("Path2",  "Running at %7d :%7d",
                        LeftB.getCurrentPosition(),
                        RightB.getCurrentPosition());
                telemetry.update();
            }

            // Stop all motion;
            LeftB.setPower(0);
            RightB.setPower(0);

            // Turn off RUN_TO_POSITION
            LeftB.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            RightB.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            sleep(200);   // optional pause after each move
        }
    }
}
